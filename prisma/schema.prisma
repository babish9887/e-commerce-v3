// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product{
      id String @id @default(auto()) @map("_id") @db.ObjectId
      name                    String
      price                   Int
      filePath                String
      imagePath                String
      description             String
      isAvailableforPurchase  Boolean           @default(true)
      createdAt               DateTime          @default(now())
      updatedAt               DateTime          @updatedAt
      totalOrders Int?
      orders Order[]
      downloadVerifications DownloadVerification[]
      category String?

}

model User {
      id String @id @default(auto()) @map("_id") @db.ObjectId
      name String 
      email String @unique
      createdAt               DateTime          @default(now())
      updatedAt               DateTime          @updatedAt
      orders Order[]
      isActivate Boolean
      verificationCode Int? 
      verificationCodeExpiry DateTime? 
      DownloadVerifications DownloadVerification[]

}


model Order {
      id String @id @default(auto()) @map("_id") @db.ObjectId
      pricePaid Int
      createdAt               DateTime          @default(now())
      updatedAt               DateTime          @updatedAt

      user User @relation(fields: [userId], references: [id], onDelete: Cascade)
      userId String @db.ObjectId

      product Product @relation(fields: [productId], references: [id], onDelete: Restrict)
      productId String @db.ObjectId
}

model DownloadVerification {
      id String @id @default(auto()) @map("_id") @db.ObjectId
      expiresAt               DateTime
      createdAt               DateTime          @default(now())
      userId String @db.ObjectId
      user User @relation(fields: [userId], references: [id], onDelete:Cascade)

      productId String @db.ObjectId
      productFilePath String?
      product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
